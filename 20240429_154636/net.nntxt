global_config {
  default_context {
    array_class: "CpuCachedArray"
    backends: "cpu:float"
  }
}
training_config {
  max_epoch: 10
  iter_per_epoch: 7
  save_best: true
  monitor_interval: 10
}
network {
  name: "Main"
  batch_size: 64
  variable {
    name: "Input"
    type: "Buffer"
    shape: { dim:-1 dim: 3 dim: 200 dim: 600 }
  }
  variable {
    name: "Convolution/conv/W"
    type: "Parameter"
    shape: { dim: 8 dim: 3 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution/conv/b"
    type: "Parameter"
    shape: { dim: 8 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Convolution_2/conv/W"
    type: "Parameter"
    shape: { dim: 16 dim: 8 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution_2/conv/b"
    type: "Parameter"
    shape: { dim: 16 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Convolution_3/conv/W"
    type: "Parameter"
    shape: { dim: 24 dim: 16 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution_3/conv/b"
    type: "Parameter"
    shape: { dim: 24 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_2/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_2/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_3/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_3/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_4/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_4/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_5/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_5/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_6/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_6/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_7/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_7/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_8/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_8/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_9/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_9/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_10/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_10/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "BinaryCrossEntropy_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_2_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_3_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_4_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_5_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_6_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_7_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_8_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_9_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_10_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Convolution"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 200 dim: 600 }
  }
  variable {
    name: "MaxPooling"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 100 dim: 300 }
  }
  variable {
    name: "ReLU"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 100 dim: 300 }
  }
  variable {
    name: "Convolution_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 100 dim: 300 }
  }
  variable {
    name: "MaxPooling_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 50 dim: 150 }
  }
  variable {
    name: "ReLU_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 50 dim: 150 }
  }
  variable {
    name: "Convolution_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 50 dim: 150 }
  }
  variable {
    name: "MaxPooling_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 25 dim: 75 }
  }
  variable {
    name: "ReLU_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 25 dim: 75 }
  }
  variable {
    name: "Affine"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  function {
    name: "Convolution"
    type: "Convolution"
    input: "Input"
    input: "Convolution/conv/W"
    input: "Convolution/conv/b"
    output: "Convolution"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling"
    type: "MaxPooling"
    input: "Convolution"
    output: "MaxPooling"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU"
    type: "ReLU"
    input: "MaxPooling"
    output: "ReLU"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Convolution_2"
    type: "Convolution"
    input: "ReLU"
    input: "Convolution_2/conv/W"
    input: "Convolution_2/conv/b"
    output: "Convolution_2"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling_2"
    type: "MaxPooling"
    input: "Convolution_2"
    output: "MaxPooling_2"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU_2"
    type: "ReLU"
    input: "MaxPooling_2"
    output: "ReLU_2"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Convolution_3"
    type: "Convolution"
    input: "ReLU_2"
    input: "Convolution_3/conv/W"
    input: "Convolution_3/conv/b"
    output: "Convolution_3"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling_3"
    type: "MaxPooling"
    input: "Convolution_3"
    output: "MaxPooling_3"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU_3"
    type: "ReLU"
    input: "MaxPooling_3"
    output: "ReLU_3"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Affine"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine/affine/W"
    input: "Affine/affine/b"
    output: "Affine"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_2"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_2/affine/W"
    input: "Affine_2/affine/b"
    output: "Affine_2"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_3"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_3/affine/W"
    input: "Affine_3/affine/b"
    output: "Affine_3"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_4"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_4/affine/W"
    input: "Affine_4/affine/b"
    output: "Affine_4"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_5"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_5/affine/W"
    input: "Affine_5/affine/b"
    output: "Affine_5"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_6"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_6/affine/W"
    input: "Affine_6/affine/b"
    output: "Affine_6"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_7"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_7/affine/W"
    input: "Affine_7/affine/b"
    output: "Affine_7"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_8"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_8/affine/W"
    input: "Affine_8/affine/b"
    output: "Affine_8"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_9"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_9/affine/W"
    input: "Affine_9/affine/b"
    output: "Affine_9"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_10"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_10/affine/W"
    input: "Affine_10/affine/b"
    output: "Affine_10"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid"
    type: "Sigmoid"
    input: "Affine"
    output: "Sigmoid"
  }
  function {
    name: "Sigmoid_2"
    type: "Sigmoid"
    input: "Affine_2"
    output: "Sigmoid_2"
  }
  function {
    name: "Sigmoid_3"
    type: "Sigmoid"
    input: "Affine_3"
    output: "Sigmoid_3"
  }
  function {
    name: "Sigmoid_4"
    type: "Sigmoid"
    input: "Affine_4"
    output: "Sigmoid_4"
  }
  function {
    name: "Sigmoid_5"
    type: "Sigmoid"
    input: "Affine_5"
    output: "Sigmoid_5"
  }
  function {
    name: "Sigmoid_6"
    type: "Sigmoid"
    input: "Affine_6"
    output: "Sigmoid_6"
  }
  function {
    name: "Sigmoid_7"
    type: "Sigmoid"
    input: "Affine_7"
    output: "Sigmoid_7"
  }
  function {
    name: "Sigmoid_8"
    type: "Sigmoid"
    input: "Affine_8"
    output: "Sigmoid_8"
  }
  function {
    name: "Sigmoid_9"
    type: "Sigmoid"
    input: "Affine_9"
    output: "Sigmoid_9"
  }
  function {
    name: "Sigmoid_10"
    type: "Sigmoid"
    input: "Affine_10"
    output: "Sigmoid_10"
  }
  function {
    name: "BinaryCrossEntropy"
    type: "BinaryCrossEntropy"
    input: "Sigmoid"
    input: "BinaryCrossEntropy_T"
    output: "BinaryCrossEntropy"
  }
  function {
    name: "BinaryCrossEntropy_2"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_3"
    input: "BinaryCrossEntropy_2_T"
    output: "BinaryCrossEntropy_2"
  }
  function {
    name: "BinaryCrossEntropy_3"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_2"
    input: "BinaryCrossEntropy_3_T"
    output: "BinaryCrossEntropy_3"
  }
  function {
    name: "BinaryCrossEntropy_4"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_4"
    input: "BinaryCrossEntropy_4_T"
    output: "BinaryCrossEntropy_4"
  }
  function {
    name: "BinaryCrossEntropy_5"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_6"
    input: "BinaryCrossEntropy_5_T"
    output: "BinaryCrossEntropy_5"
  }
  function {
    name: "BinaryCrossEntropy_6"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_5"
    input: "BinaryCrossEntropy_6_T"
    output: "BinaryCrossEntropy_6"
  }
  function {
    name: "BinaryCrossEntropy_7"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_7"
    input: "BinaryCrossEntropy_7_T"
    output: "BinaryCrossEntropy_7"
  }
  function {
    name: "BinaryCrossEntropy_8"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_9"
    input: "BinaryCrossEntropy_8_T"
    output: "BinaryCrossEntropy_8"
  }
  function {
    name: "BinaryCrossEntropy_9"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_8"
    input: "BinaryCrossEntropy_9_T"
    output: "BinaryCrossEntropy_9"
  }
  function {
    name: "BinaryCrossEntropy_10"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_10"
    input: "BinaryCrossEntropy_10_T"
    output: "BinaryCrossEntropy_10"
  }
}
network {
  name: "MainValidation"
  batch_size: 64
  variable {
    name: "Input"
    type: "Buffer"
    shape: { dim:-1 dim: 3 dim: 200 dim: 600 }
  }
  variable {
    name: "Convolution/conv/W"
    type: "Parameter"
    shape: { dim: 8 dim: 3 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution/conv/b"
    type: "Parameter"
    shape: { dim: 8 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Convolution_2/conv/W"
    type: "Parameter"
    shape: { dim: 16 dim: 8 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution_2/conv/b"
    type: "Parameter"
    shape: { dim: 16 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Convolution_3/conv/W"
    type: "Parameter"
    shape: { dim: 24 dim: 16 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution_3/conv/b"
    type: "Parameter"
    shape: { dim: 24 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_2/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_2/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_3/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_3/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_4/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_4/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_5/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_5/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_6/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_6/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_7/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_7/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_8/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_8/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_9/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_9/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_10/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_10/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "BinaryCrossEntropy_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_2_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_3_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_4_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_5_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_6_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_7_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_8_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_9_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_10_T"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Convolution"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 200 dim: 600 }
  }
  variable {
    name: "MaxPooling"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 100 dim: 300 }
  }
  variable {
    name: "ReLU"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 100 dim: 300 }
  }
  variable {
    name: "Convolution_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 100 dim: 300 }
  }
  variable {
    name: "MaxPooling_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 50 dim: 150 }
  }
  variable {
    name: "ReLU_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 50 dim: 150 }
  }
  variable {
    name: "Convolution_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 50 dim: 150 }
  }
  variable {
    name: "MaxPooling_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 25 dim: 75 }
  }
  variable {
    name: "ReLU_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 25 dim: 75 }
  }
  variable {
    name: "Affine"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "BinaryCrossEntropy_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  function {
    name: "Convolution"
    type: "Convolution"
    input: "Input"
    input: "Convolution/conv/W"
    input: "Convolution/conv/b"
    output: "Convolution"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling"
    type: "MaxPooling"
    input: "Convolution"
    output: "MaxPooling"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU"
    type: "ReLU"
    input: "MaxPooling"
    output: "ReLU"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Convolution_2"
    type: "Convolution"
    input: "ReLU"
    input: "Convolution_2/conv/W"
    input: "Convolution_2/conv/b"
    output: "Convolution_2"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling_2"
    type: "MaxPooling"
    input: "Convolution_2"
    output: "MaxPooling_2"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU_2"
    type: "ReLU"
    input: "MaxPooling_2"
    output: "ReLU_2"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Convolution_3"
    type: "Convolution"
    input: "ReLU_2"
    input: "Convolution_3/conv/W"
    input: "Convolution_3/conv/b"
    output: "Convolution_3"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling_3"
    type: "MaxPooling"
    input: "Convolution_3"
    output: "MaxPooling_3"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU_3"
    type: "ReLU"
    input: "MaxPooling_3"
    output: "ReLU_3"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Affine"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine/affine/W"
    input: "Affine/affine/b"
    output: "Affine"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_2"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_2/affine/W"
    input: "Affine_2/affine/b"
    output: "Affine_2"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_3"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_3/affine/W"
    input: "Affine_3/affine/b"
    output: "Affine_3"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_4"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_4/affine/W"
    input: "Affine_4/affine/b"
    output: "Affine_4"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_5"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_5/affine/W"
    input: "Affine_5/affine/b"
    output: "Affine_5"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_6"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_6/affine/W"
    input: "Affine_6/affine/b"
    output: "Affine_6"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_7"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_7/affine/W"
    input: "Affine_7/affine/b"
    output: "Affine_7"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_8"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_8/affine/W"
    input: "Affine_8/affine/b"
    output: "Affine_8"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_9"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_9/affine/W"
    input: "Affine_9/affine/b"
    output: "Affine_9"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_10"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_10/affine/W"
    input: "Affine_10/affine/b"
    output: "Affine_10"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid"
    type: "Sigmoid"
    input: "Affine"
    output: "Sigmoid"
  }
  function {
    name: "Sigmoid_2"
    type: "Sigmoid"
    input: "Affine_2"
    output: "Sigmoid_2"
  }
  function {
    name: "Sigmoid_3"
    type: "Sigmoid"
    input: "Affine_3"
    output: "Sigmoid_3"
  }
  function {
    name: "Sigmoid_4"
    type: "Sigmoid"
    input: "Affine_4"
    output: "Sigmoid_4"
  }
  function {
    name: "Sigmoid_5"
    type: "Sigmoid"
    input: "Affine_5"
    output: "Sigmoid_5"
  }
  function {
    name: "Sigmoid_6"
    type: "Sigmoid"
    input: "Affine_6"
    output: "Sigmoid_6"
  }
  function {
    name: "Sigmoid_7"
    type: "Sigmoid"
    input: "Affine_7"
    output: "Sigmoid_7"
  }
  function {
    name: "Sigmoid_8"
    type: "Sigmoid"
    input: "Affine_8"
    output: "Sigmoid_8"
  }
  function {
    name: "Sigmoid_9"
    type: "Sigmoid"
    input: "Affine_9"
    output: "Sigmoid_9"
  }
  function {
    name: "Sigmoid_10"
    type: "Sigmoid"
    input: "Affine_10"
    output: "Sigmoid_10"
  }
  function {
    name: "BinaryCrossEntropy"
    type: "BinaryCrossEntropy"
    input: "Sigmoid"
    input: "BinaryCrossEntropy_T"
    output: "BinaryCrossEntropy"
  }
  function {
    name: "BinaryCrossEntropy_2"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_3"
    input: "BinaryCrossEntropy_2_T"
    output: "BinaryCrossEntropy_2"
  }
  function {
    name: "BinaryCrossEntropy_3"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_2"
    input: "BinaryCrossEntropy_3_T"
    output: "BinaryCrossEntropy_3"
  }
  function {
    name: "BinaryCrossEntropy_4"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_4"
    input: "BinaryCrossEntropy_4_T"
    output: "BinaryCrossEntropy_4"
  }
  function {
    name: "BinaryCrossEntropy_5"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_6"
    input: "BinaryCrossEntropy_5_T"
    output: "BinaryCrossEntropy_5"
  }
  function {
    name: "BinaryCrossEntropy_6"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_5"
    input: "BinaryCrossEntropy_6_T"
    output: "BinaryCrossEntropy_6"
  }
  function {
    name: "BinaryCrossEntropy_7"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_7"
    input: "BinaryCrossEntropy_7_T"
    output: "BinaryCrossEntropy_7"
  }
  function {
    name: "BinaryCrossEntropy_8"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_9"
    input: "BinaryCrossEntropy_8_T"
    output: "BinaryCrossEntropy_8"
  }
  function {
    name: "BinaryCrossEntropy_9"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_8"
    input: "BinaryCrossEntropy_9_T"
    output: "BinaryCrossEntropy_9"
  }
  function {
    name: "BinaryCrossEntropy_10"
    type: "BinaryCrossEntropy"
    input: "Sigmoid_10"
    input: "BinaryCrossEntropy_10_T"
    output: "BinaryCrossEntropy_10"
  }
}
network {
  name: "MainRuntime"
  batch_size: 64
  variable {
    name: "Input"
    type: "Buffer"
    shape: { dim:-1 dim: 3 dim: 200 dim: 600 }
  }
  variable {
    name: "Convolution/conv/W"
    type: "Parameter"
    shape: { dim: 8 dim: 3 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution/conv/b"
    type: "Parameter"
    shape: { dim: 8 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Convolution_2/conv/W"
    type: "Parameter"
    shape: { dim: 16 dim: 8 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution_2/conv/b"
    type: "Parameter"
    shape: { dim: 16 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Convolution_3/conv/W"
    type: "Parameter"
    shape: { dim: 24 dim: 16 dim: 3 dim: 3 }
    initializer {
      type: "NormalConvolutionGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Convolution_3/conv/b"
    type: "Parameter"
    shape: { dim: 24 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_2/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_2/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_3/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_3/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_4/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_4/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_5/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_5/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_6/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_6/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_7/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_7/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_8/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_8/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_9/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_9/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_10/affine/W"
    type: "Parameter"
    shape: { dim: 45000 dim: 1 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_10/affine/b"
    type: "Parameter"
    shape: { dim: 1 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Convolution"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 200 dim: 600 }
  }
  variable {
    name: "MaxPooling"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 100 dim: 300 }
  }
  variable {
    name: "ReLU"
    type: "Buffer"
    shape: { dim:-1 dim: 8 dim: 100 dim: 300 }
  }
  variable {
    name: "Convolution_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 100 dim: 300 }
  }
  variable {
    name: "MaxPooling_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 50 dim: 150 }
  }
  variable {
    name: "ReLU_2"
    type: "Buffer"
    shape: { dim:-1 dim: 16 dim: 50 dim: 150 }
  }
  variable {
    name: "Convolution_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 50 dim: 150 }
  }
  variable {
    name: "MaxPooling_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 25 dim: 75 }
  }
  variable {
    name: "ReLU_3"
    type: "Buffer"
    shape: { dim:-1 dim: 24 dim: 25 dim: 75 }
  }
  variable {
    name: "Affine"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Affine_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_2"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_3"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_4"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_5"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_6"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_7"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_8"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_9"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  variable {
    name: "Sigmoid_10"
    type: "Buffer"
    shape: { dim:-1 dim: 1 }
  }
  function {
    name: "Convolution"
    type: "Convolution"
    input: "Input"
    input: "Convolution/conv/W"
    input: "Convolution/conv/b"
    output: "Convolution"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling"
    type: "MaxPooling"
    input: "Convolution"
    output: "MaxPooling"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU"
    type: "ReLU"
    input: "MaxPooling"
    output: "ReLU"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Convolution_2"
    type: "Convolution"
    input: "ReLU"
    input: "Convolution_2/conv/W"
    input: "Convolution_2/conv/b"
    output: "Convolution_2"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling_2"
    type: "MaxPooling"
    input: "Convolution_2"
    output: "MaxPooling_2"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU_2"
    type: "ReLU"
    input: "MaxPooling_2"
    output: "ReLU_2"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Convolution_3"
    type: "Convolution"
    input: "ReLU_2"
    input: "Convolution_3/conv/W"
    input: "Convolution_3/conv/b"
    output: "Convolution_3"
    convolution_param {
      pad: { dim: 1 dim: 1 }
      stride: { dim: 1 dim: 1 }
      dilation: { dim: 1 dim: 1 }
      group: 1
      channel_last: false
      base_axis: 1
    }
  }
  function {
    name: "MaxPooling_3"
    type: "MaxPooling"
    input: "Convolution_3"
    output: "MaxPooling_3"
    max_pooling_param {
      kernel: { dim: 2 dim: 2 }
      stride: { dim: 2 dim: 2 }
      ignore_border: true
      pad: { dim: 0 dim: 0 }
      channel_last: false
    }
  }
  function {
    name: "ReLU_3"
    type: "ReLU"
    input: "MaxPooling_3"
    output: "ReLU_3"
    relu_param {
      inplace: True
    }
  }
  function {
    name: "Affine"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine/affine/W"
    input: "Affine/affine/b"
    output: "Affine"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_2"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_2/affine/W"
    input: "Affine_2/affine/b"
    output: "Affine_2"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_3"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_3/affine/W"
    input: "Affine_3/affine/b"
    output: "Affine_3"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_4"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_4/affine/W"
    input: "Affine_4/affine/b"
    output: "Affine_4"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_5"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_5/affine/W"
    input: "Affine_5/affine/b"
    output: "Affine_5"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_6"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_6/affine/W"
    input: "Affine_6/affine/b"
    output: "Affine_6"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_7"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_7/affine/W"
    input: "Affine_7/affine/b"
    output: "Affine_7"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_8"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_8/affine/W"
    input: "Affine_8/affine/b"
    output: "Affine_8"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_9"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_9/affine/W"
    input: "Affine_9/affine/b"
    output: "Affine_9"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Affine_10"
    type: "Affine"
    input: "ReLU_3"
    input: "Affine_10/affine/W"
    input: "Affine_10/affine/b"
    output: "Affine_10"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid"
    type: "Sigmoid"
    input: "Affine"
    output: "Sigmoid"
  }
  function {
    name: "Sigmoid_2"
    type: "Sigmoid"
    input: "Affine_2"
    output: "Sigmoid_2"
  }
  function {
    name: "Sigmoid_3"
    type: "Sigmoid"
    input: "Affine_3"
    output: "Sigmoid_3"
  }
  function {
    name: "Sigmoid_4"
    type: "Sigmoid"
    input: "Affine_4"
    output: "Sigmoid_4"
  }
  function {
    name: "Sigmoid_5"
    type: "Sigmoid"
    input: "Affine_5"
    output: "Sigmoid_5"
  }
  function {
    name: "Sigmoid_6"
    type: "Sigmoid"
    input: "Affine_6"
    output: "Sigmoid_6"
  }
  function {
    name: "Sigmoid_7"
    type: "Sigmoid"
    input: "Affine_7"
    output: "Sigmoid_7"
  }
  function {
    name: "Sigmoid_8"
    type: "Sigmoid"
    input: "Affine_8"
    output: "Sigmoid_8"
  }
  function {
    name: "Sigmoid_9"
    type: "Sigmoid"
    input: "Affine_9"
    output: "Sigmoid_9"
  }
  function {
    name: "Sigmoid_10"
    type: "Sigmoid"
    input: "Affine_10"
    output: "Sigmoid_10"
  }
}
dataset {
  name: "Training"
  uri: "C:\\jikken\\neural_network_console\\many_number\\train\\train.csv"
  cache_dir: "C:\\jikken\\neural_network_console\\many_number\\train\\train.cache"
  overwrite_cache: true
  create_cache_explicitly: true
  shuffle: true
  no_image_normalization: false
  batch_size: 64
}
dataset {
  name: "Validation"
  uri: "C:\\jikken\\neural_network_console\\many_number\\val\\val.csv"
  cache_dir: "C:\\jikken\\neural_network_console\\many_number\\val\\val.cache"
  overwrite_cache: true
  create_cache_explicitly: true
  shuffle: false
  no_image_normalization: false
  batch_size: 64
}
optimizer {
  start_iter: 0
  end_iter: 0
  name: "Optimizer"
  update_interval: 1
  network_name: "Main"
  dataset_name: "Training"
  solver {
    type: "Adam"
    weight_decay: 0
    adam_param {
      alpha: 0.001
      beta1: 0.9
      beta2: 0.999
      eps: 1e-08
    }
    lr_scheduler_type: "Exponential"
    exponential_scheduler_param {
      gamma: 1
      iter_interval: 7
    }
    lr_decay: 1
    lr_decay_interval: 7
    lr_warmup_scheduler_type: "None"
  }
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_T"
    data_name: "y_0"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_2_T"
    data_name: "y_2"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_3_T"
    data_name: "y_1"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_4_T"
    data_name: "y_3"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_5_T"
    data_name: "y_5"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_6_T"
    data_name: "y_4"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_7_T"
    data_name: "y_6"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_8_T"
    data_name: "y_8"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_9_T"
    data_name: "y_7"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_10_T"
    data_name: "y_9"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_2"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_3"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_4"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_5"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_6"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_7"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_8"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_9"
  }
  loss_variable {
    variable_name: "BinaryCrossEntropy_10"
  }
  parameter_variable {
    variable_name: "Convolution/conv/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Convolution/conv/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Convolution_2/conv/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Convolution_2/conv/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Convolution_3/conv/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Convolution_3/conv/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_2/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_2/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_3/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_3/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_4/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_4/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_5/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_5/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_6/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_6/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_7/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_7/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_8/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_8/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_9/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_9/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_10/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_10/affine/b"
    learning_rate_multiplier: 1
  }
}
monitor {
  name: "train_error"
  network_name: "MainValidation"
  dataset_name: "Training"
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_T"
    data_name: "y_0"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_2_T"
    data_name: "y_2"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_3_T"
    data_name: "y_1"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_4_T"
    data_name: "y_3"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_5_T"
    data_name: "y_5"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_6_T"
    data_name: "y_4"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_7_T"
    data_name: "y_6"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_8_T"
    data_name: "y_8"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_9_T"
    data_name: "y_7"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_10_T"
    data_name: "y_9"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_2"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_3"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_4"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_5"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_6"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_7"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_8"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_9"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_10"
  }
}
monitor {
  name: "valid_error"
  network_name: "MainValidation"
  dataset_name: "Validation"
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_T"
    data_name: "y_0"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_2_T"
    data_name: "y_2"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_3_T"
    data_name: "y_1"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_4_T"
    data_name: "y_3"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_5_T"
    data_name: "y_5"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_6_T"
    data_name: "y_4"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_7_T"
    data_name: "y_6"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_8_T"
    data_name: "y_8"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_9_T"
    data_name: "y_7"
  }
  data_variable {
    variable_name: "BinaryCrossEntropy_10_T"
    data_name: "y_9"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_2"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_3"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_4"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_5"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_6"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_7"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_8"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_9"
  }
  monitor_variable {
    type: "Error"
    variable_name: "BinaryCrossEntropy_10"
  }
}
executor {
  name: "Executor"
  network_name: "MainRuntime"
  num_evaluations: 1
  repeat_evaluation_type: "mean"
  need_back_propagation: false
  no_image_normalization: false
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  output_variable {
    variable_name: "Sigmoid"
    data_name: "y_0'"
  }
  output_variable {
    variable_name: "Sigmoid_2"
    data_name: "y_1'"
  }
  output_variable {
    variable_name: "Sigmoid_3"
    data_name: "y_2'"
  }
  output_variable {
    variable_name: "Sigmoid_4"
    data_name: "y_3'"
  }
  output_variable {
    variable_name: "Sigmoid_5"
    data_name: "y_4'"
  }
  output_variable {
    variable_name: "Sigmoid_6"
    data_name: "y_5'"
  }
  output_variable {
    variable_name: "Sigmoid_7"
    data_name: "y_6'"
  }
  output_variable {
    variable_name: "Sigmoid_8"
    data_name: "y_7'"
  }
  output_variable {
    variable_name: "Sigmoid_9"
    data_name: "y_8'"
  }
  output_variable {
    variable_name: "Sigmoid_10"
    data_name: "y_9'"
  }
  parameter_variable {
    variable_name: "Convolution/conv/W"
  }
  parameter_variable {
    variable_name: "Convolution/conv/b"
  }
  parameter_variable {
    variable_name: "Convolution_2/conv/W"
  }
  parameter_variable {
    variable_name: "Convolution_2/conv/b"
  }
  parameter_variable {
    variable_name: "Convolution_3/conv/W"
  }
  parameter_variable {
    variable_name: "Convolution_3/conv/b"
  }
  parameter_variable {
    variable_name: "Affine/affine/W"
  }
  parameter_variable {
    variable_name: "Affine/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_2/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_2/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_3/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_3/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_4/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_4/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_5/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_5/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_6/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_6/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_7/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_7/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_8/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_8/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_9/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_9/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_10/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_10/affine/b"
  }
}
